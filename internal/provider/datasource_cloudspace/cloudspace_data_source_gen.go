// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package datasource_cloudspace

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/types"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func CloudspaceDataSourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"api_server_endpoint": schema.StringAttribute{
				Computed:            true,
				Description:         "Kubernetes api server URL",
				MarkdownDescription: "Kubernetes api server URL",
			},
			"health": schema.StringAttribute{
				Computed:            true,
				Description:         "Health indicates if CloudSpace has a working APIServer and available nodes",
				MarkdownDescription: "Health indicates if CloudSpace has a working APIServer and available nodes",
			},
			"id": schema.StringAttribute{
				Required:            true,
				Description:         "ID of the cloudspace",
				MarkdownDescription: "ID of the cloudspace",
			},
			"kubeconfig": schema.StringAttribute{
				Computed:            true,
				Description:         "Kubeconfig blob",
				MarkdownDescription: "Kubeconfig blob",
				DeprecationMessage:  "Use the kubeconfig data source instead",
			},
			"name": schema.StringAttribute{
				Computed:            true,
				Description:         "Name of the cloudspace",
				MarkdownDescription: "Name of the cloudspace",
			},
			"phase": schema.StringAttribute{
				Computed:            true,
				Description:         "Phase of the cloudspace",
				MarkdownDescription: "Phase of the cloudspace",
			},
			"reason": schema.StringAttribute{
				Computed:            true,
				Description:         "Reason contains the reason why the CloudSpace is in a certain phase.",
				MarkdownDescription: "Reason contains the reason why the CloudSpace is in a certain phase.",
			},
			"region": schema.StringAttribute{
				Computed:            true,
				Description:         "The region where the cloudspace resides.",
				MarkdownDescription: "The region where the cloudspace resides.",
			},
			"token": schema.StringAttribute{
				Computed:            true,
				Description:         "Token to use for authentication to kubernetes api server",
				MarkdownDescription: "Token to use for authentication to kubernetes api server",
			},
			"user": schema.StringAttribute{
				Computed:            true,
				Description:         "Name of the user to use for authentication to kubernetes api server",
				MarkdownDescription: "Name of the user to use for authentication to kubernetes api server",
			},
		},
	}
}

type CloudspaceModel struct {
	ApiServerEndpoint types.String `tfsdk:"api_server_endpoint"`
	Health            types.String `tfsdk:"health"`
	Id                types.String `tfsdk:"id"`
	Kubeconfig        types.String `tfsdk:"kubeconfig"`
	Name              types.String `tfsdk:"name"`
	Phase             types.String `tfsdk:"phase"`
	Reason            types.String `tfsdk:"reason"`
	Region            types.String `tfsdk:"region"`
	Token             types.String `tfsdk:"token"`
	User              types.String `tfsdk:"user"`
}
