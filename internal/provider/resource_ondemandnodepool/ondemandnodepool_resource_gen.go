// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package resource_ondemandnodepool

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework-validators/int64validator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"regexp"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func OndemandnodepoolResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"cloudspace_name": schema.StringAttribute{
				Required:            true,
				Description:         "The name of the cloudspace.",
				MarkdownDescription: "The name of the cloudspace.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Validators: []validator.String{
					stringvalidator.LengthBetween(1, 63),
					stringvalidator.RegexMatches(regexp.MustCompile(`^[a-zA-Z0-9]([-a-zA-Z0-9]*[a-zA-Z0-9])?$`), "Must be valid kubernetes name"),
				},
			},
			"desired_server_count": schema.Int64Attribute{
				Required:            true,
				Description:         "The desired number of servers in the node pool.",
				MarkdownDescription: "The desired number of servers in the node pool.",
				Validators: []validator.Int64{
					int64validator.AtLeast(1),
				},
			},
			"last_updated": schema.StringAttribute{
				Computed:            true,
				Description:         "The last time the ondemandnodepool was updated.",
				MarkdownDescription: "The last time the ondemandnodepool was updated.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"name": schema.StringAttribute{
				Computed:            true,
				Description:         "The name of the ondemandnodepool.",
				MarkdownDescription: "The name of the ondemandnodepool.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"reserved_count": schema.Int64Attribute{
				Computed:            true,
				Description:         "Number of reserved on-demand nodes.",
				MarkdownDescription: "Number of reserved on-demand nodes.",
				PlanModifiers: []planmodifier.Int64{
					int64planmodifier.UseStateForUnknown(),
				},
			},
			"reserved_status": schema.StringAttribute{
				Computed:            true,
				Description:         "Status of the ondemandnodepool.",
				MarkdownDescription: "Status of the ondemandnodepool.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"server_class": schema.StringAttribute{
				Required:            true,
				Description:         "The server class to be used for the node pool can be obtained from the serverclasses data source.",
				MarkdownDescription: "The server class to be used for the node pool can be obtained from the serverclasses data source.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
		},
	}
}

type OndemandnodepoolModel struct {
	CloudspaceName     types.String `tfsdk:"cloudspace_name"`
	DesiredServerCount types.Int64  `tfsdk:"desired_server_count"`
	LastUpdated        types.String `tfsdk:"last_updated"`
	Name               types.String `tfsdk:"name"`
	ReservedCount      types.Int64  `tfsdk:"reserved_count"`
	ReservedStatus     types.String `tfsdk:"reserved_status"`
	ServerClass        types.String `tfsdk:"server_class"`
}
