// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package resource_cloudspace

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func CloudspaceResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"cloudspace_name": schema.StringAttribute{
				Required:            true,
				Description:         "The name of the cloudspace.",
				MarkdownDescription: "The name of the cloudspace.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"hacontrol_plane": schema.BoolAttribute{
				Optional:            true,
				Description:         "Indicates if the control plane should be highly available.",
				MarkdownDescription: "Indicates if the control plane should be highly available.",
			},
			"id": schema.StringAttribute{
				Computed:            true,
				Description:         "The id of the cloudspace.",
				MarkdownDescription: "The id of the cloudspace.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"last_updated": schema.StringAttribute{
				Computed:            true,
				Description:         "The last time the cloudspace was updated.",
				MarkdownDescription: "The last time the cloudspace was updated.",
			},
			"organization": schema.StringAttribute{
				Required:            true,
				Description:         "The organization to which the cloudspace belongs.",
				MarkdownDescription: "The organization to which the cloudspace belongs.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"preemption_webhook": schema.StringAttribute{
				Optional:            true,
				Description:         "Webhook URL for preemption notifications.",
				MarkdownDescription: "Webhook URL for preemption notifications.",
			},
			"region": schema.StringAttribute{
				Required:            true,
				Description:         "The region where the cloudspace will be created.",
				MarkdownDescription: "The region where the cloudspace will be created.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Validators: []validator.String{
					stringvalidator.OneOf(
						"us-central-dfw-1",
						"us-east-iad-1",
					),
				},
			},
			"resource_version": schema.StringAttribute{
				Computed:            true,
				Description:         "The version of the resource known to local state. This is used to determine if the resource is modified outside of terraform.",
				MarkdownDescription: "The version of the resource known to local state. This is used to determine if the resource is modified outside of terraform.",
			},
		},
	}
}

type CloudspaceModel struct {
	CloudspaceName    types.String `tfsdk:"cloudspace_name"`
	HacontrolPlane    types.Bool   `tfsdk:"hacontrol_plane"`
	Id                types.String `tfsdk:"id"`
	LastUpdated       types.String `tfsdk:"last_updated"`
	Organization      types.String `tfsdk:"organization"`
	PreemptionWebhook types.String `tfsdk:"preemption_webhook"`
	Region            types.String `tfsdk:"region"`
	ResourceVersion   types.String `tfsdk:"resource_version"`
}
