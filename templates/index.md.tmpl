---
# generated by https://github.com/hashicorp/terraform-plugin-docs
page_title: "Terraform Provider for Rackspace {{ .ProviderShortName | title }}"
subcategory: ""
description: |-
  The rackspace spot terraform provider offers a streamlined solution for creating and managing cloudspaces on Rackspace's robust infrastructure.
---

# Rackspace {{ .ProviderShortName | title }} Provider

The Rackspace {{ .ProviderShortName | title }} Provider is a solution for creating and managing multiple cloudspaces, on Rackspace's robust infrastructure.

Rackspace Spot delivers fully managed and pre-configured Kubernetes clusters, known as cloudspaces, providing a turnkey solution for deploying and running containerized applications.

## Authenticating with Rackspace Spot

To use this provider, set an authentication token as an environment variable, obtainable via the Rackspace Spot dashboard, https://spot.rackspace.com.

- `RXTSPOT_TOKEN`:  This is the actual token value.
- `RXTSPOT_TOKEN_FILE`: This is the absolute path to the file containing the token value.

```bash
export RXTSPOT_TOKEN=<rackspace-spot-token>
# or
export RXTSPOT_TOKEN_FILE=/path/to/token/file
```
You can set the token directly in the provider configuration as shown below. However, it is recommended to use Terraform variables instead of hard-coding the token in your Terraform configuration files. This approach prevents accidental exposure of the token in version control.

## Example Usage

Declare the provider in your configuration and terraform init will automatically fetch and install the provider for you from the Terraform Registry:

{{ tffile .ExampleFile }}

{{ .SchemaMarkdown | trimspace }}

## Create Your First Cloudspace

Get started with Rackspace Spot by creating your first Spot Cloudspace. Follow the steps below to create a cloudspace and deploy your workloads.

1. Log in to the [Rackspace Spot Console](https://spot.rackspace.com) and copy the Access Token:
   - Navigate to the **Terraform** menu under **API Access** on the left pane.
   - Copy the **Access Token** provided on that page.
   - **Important:** Treat the access token as sensitive information. Avoid sharing it publicly.

2. Set the copied token as an environment variable:

   ```bash
   echo "<your_access_token>" > ~/.rxtspot_token
   export RXTSPOT_TOKEN_FILE=$HOME/.rxtspot_token
   ```

3. Create your terraform configuration file

{{ tffile "examples/cloudspace/main.tf" }}

4. Use generated kubeconfig to access your cloudspace.
   - The cloudspace phase must be healthy

## Know your Cloudspace

A Cloudspace represents a logical unit of your cloud infrastructure. It includes:

- An infrastructure pool comprising servers, storage and network. Rackspace Spot uses spare virtual server capacity from Rackspace's global data-centers as the backing infrastructure
- A cloud operating system such as Kubernetes

Learn more about Cloudspaces [here](https://spot.rackspace.com/docs/create-rackspace-spot-cloudspace).

### Spotnodepool

A spotnodepool is a pool of nodes in a Spot cloudspace. In Spot, you organize your servers into groups called spotnodepools, which you add to your cloudspace. A spotnodepool is a collection of servers with identical specifications. You can define multiple spotnodepools within a single cloudspace, and all these server groups will be part of the same Kubernetes cluster associated with that cloudspace. The servers in a spotnodepool become worker nodes, in terms of Kubernetes cluster terminology.

{{ tffile "examples/spotnodepool/nonautoscaling.tf" }}

### Spotnodepool with Autoscaling

A spotnodepool can be configured to dynamically adjust the number of servers based on demand. This is known as autoscaling. When demand is high, the spotnodepool can automatically increase the number of servers, and when demand decreases, it can scale down to optimize costs. You can specify the minimum and maximum number of servers in the spotnodepool, and the spotnodepool will automatically scale up or down based on the load.

{{ tffile "examples/spotnodepool/autoscaling.tf" }}
