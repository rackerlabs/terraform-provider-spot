{
	"provider": {
		"name": "spot",
		"schema": {
			"attributes": [
				{
					"name": "token",
					"string": {
						"optional_required": "optional",
						"sensitive": true,
						"description": "API token used to authenticate against Spot backend"
					}
				}
			]
		}
	},
	"resources": [
		{
			"name": "cloudspace",
			"schema": {
				"attributes": [
					{
						"name": "id",
						"string": {
							"computed_optional_required": "computed",
							"description": "The id of the cloudspace",
							"deprecation_message": "Use the cloudspace_name attribute instead",
							"plan_modifiers": [
								{
									"custom": {
										"imports": [
											{
												"path": "github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
											}
										],
										"schema_definition": "stringplanmodifier.UseStateForUnknown()"
									}
								}
							]
						}
					},
					{
						"name": "name",
						"string": {
							"computed_optional_required": "computed_optional",
							"description": "The name of the cloudspace.",
							"plan_modifiers": [
								{
									"custom": {
										"imports": [
											{
												"path": "github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
											}
										],
										"schema_definition": "stringplanmodifier.RequiresReplace()"
									}
								},
								{
									"custom": {
										"imports": [
											{
												"path": "github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
											}
										],
										"schema_definition": "stringplanmodifier.UseStateForUnknown()"
									}
								}
							],
							"validators": [
								{
									"custom": {
										"imports": [
											{
												"path": "github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
											}
										],
										"schema_definition": "stringvalidator.LengthBetween(1, 63)"
									}
								},
								{
									"custom": {
										"imports": [
											{
												"path": "github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
											},
											{
												"path": "regexp"
											}
										],
										"schema_definition": "stringvalidator.RegexMatches(regexp.MustCompile(`^[a-zA-Z0-9]([-a-zA-Z0-9]*[a-zA-Z0-9])?$`), \"Must be a valid kubernetes name\")"
									}
								},
								{
									"custom": {
										"imports": [
											{
												"path": "github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
											},
											{
												"path": "github.com/hashicorp/terraform-plugin-framework/path"
											}
										],
										"schema_definition": "stringvalidator.AtLeastOneOf(path.Expressions{path.MatchRoot(\"name\"), path.MatchRoot(\"cloudspace_name\")}...)"
									}
								}
							]
						}
					},
					{
						"name": "cloudspace_name",
						"string": {
							"computed_optional_required": "computed_optional",
							"description": "The name of the cloudspace.",
							"plan_modifiers": [
								{
									"custom": {
										"imports": [
											{
												"path": "github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
											}
										],
										"schema_definition": "stringplanmodifier.RequiresReplace()"
									}
								},
								{
									"custom": {
										"imports": [
											{
												"path": "github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
											}
										],
										"schema_definition": "stringplanmodifier.UseStateForUnknown()"
									}
								}
							],
							"validators": [
								{
									"custom": {
										"imports": [
											{
												"path": "github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
											}
										],
										"schema_definition": "stringvalidator.LengthBetween(1, 63)"
									}
								},
								{
									"custom": {
										"imports": [
											{
												"path": "github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
											},
											{
												"path": "regexp"
											}
										],
										"schema_definition": "stringvalidator.RegexMatches(regexp.MustCompile(`^[a-zA-Z0-9]([-a-zA-Z0-9]*[a-zA-Z0-9])?$`), \"Must be a valid kubernetes name\")"
									}
								}
							]
						}
					},
					{
						"name": "last_updated",
						"string": {
							"computed_optional_required": "computed",
							"description": "The last time the cloudspace was updated.",
							"plan_modifiers": [
								{
									"custom": {
										"imports": [
											{
												"path": "github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
											}
										],
										"schema_definition": "stringplanmodifier.UseStateForUnknown()"
									}
								}
							]
						}
					},
					{
						"name": "hacontrol_plane",
						"bool": {
							"default": {
								"static": false
							},
							"computed_optional_required": "computed_optional",
							"description": "High Availability Kubernetes (replicated control plane for redundancy). This is a critical feature for production workloads.",
							"plan_modifiers": [
								{
									"custom": {
										"imports": [
											{
												"path": "github.com/hashicorp/terraform-plugin-framework/resource/schema/boolplanmodifier"
											}
										],
										"schema_definition": "boolplanmodifier.UseStateForUnknown()"
									}
								}
							]
						}
					},
					{
						"name": "region",
						"string": {
							"computed_optional_required": "required",
							"description": "The region where the cloudspace will be created.",
							"plan_modifiers": [
								{
									"custom": {
										"imports": [
											{
												"path": "github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
											}
										],
										"schema_definition": "stringplanmodifier.RequiresReplace()"
									}
								}
							]
						}
					},
					{
						"name": "preemption_webhook",
						"string": {
							"computed_optional_required": "optional",
							"description": "Webhook URL for preemption notifications.",
							"validators": [
								{
									"custom": {
										"imports": [
											{
												"path": "github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
											}
										],
										"schema_definition": "stringvalidator.LengthBetween(1, 255)"
									}
								},
								{
									"custom": {
										"imports": [
											{
												"path": "github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
											},
											{
												"path": "regexp"
											}
										],
										"schema_definition": "stringvalidator.RegexMatches(regexp.MustCompile(`^http(s)?://.+`), \"Must be a valid URL\")"
									}
								}
							]
						}
					},
					{
						"name": "first_ready_timestamp",
						"string": {
							"computed_optional_required": "computed",
							"description": "The time when the cloudspace was first ready.",
							"plan_modifiers": [
								{
									"custom": {
										"imports": [
											{
												"path": "github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
											}
										],
										"schema_definition": "stringplanmodifier.UseStateForUnknown()"
									}
								}
							]
						}
					},
					{
						"name": "spotnodepool_ids",
						"list": {
							"computed_optional_required": "computed",
							"plan_modifiers": [
								{
									"custom": {
										"imports": [
											{
												"path": "github.com/hashicorp/terraform-plugin-framework/resource/schema/listplanmodifier"
											}
										],
										"schema_definition": "listplanmodifier.UseStateForUnknown()"
									}
								}
							],
							"description": "IDs of the spotnodepools associated with the cloudspace.",
							"element_type": {
								"string": {}
							}
						}
					},
					{
						"name": "bids",
						"set_nested": {
							"computed_optional_required": "computed",
							"plan_modifiers": [
								{
									"custom": {
										"imports": [
											{
												"path": "github.com/hashicorp/terraform-plugin-framework/resource/schema/setplanmodifier"
											}
										],
										"schema_definition": "setplanmodifier.UseStateForUnknown()"
									}
								}
							],
							"nested_object": {
								"attributes": [
									{
										"name": "bid_name",
										"string": {
											"computed_optional_required": "computed",
											"plan_modifiers": [
												{
													"custom": {
														"imports": [
															{
																"path": "github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
															}
														],
														"schema_definition": "stringplanmodifier.UseStateForUnknown()"
													}
												}
											]
										}
									},
									{
										"name": "won_count",
										"int64": {
											"computed_optional_required": "computed",
											"plan_modifiers": [
												{
													"custom": {
														"imports": [
															{
																"path": "github.com/hashicorp/terraform-plugin-framework/resource/schema/int64planmodifier"
															}
														],
														"schema_definition": "int64planmodifier.UseStateForUnknown()"
													}
												}
											]
										}
									}
								]
							}
						}
					},
					{
						"name": "pending_allocations",
						"set_nested": {
							"computed_optional_required": "computed",
							"nested_object": {
								"attributes": [
									{
										"name": "bid_name",
										"string": {
											"computed_optional_required": "computed"
										}
									},
									{
										"name": "server_class",
										"string": {
											"computed_optional_required": "computed"
										}
									},
									{
										"name": "count",
										"int64": {
											"computed_optional_required": "computed"
										}
									}
								]
							}
						}
					}
				]
			}
		},
		{
			"name": "spotnodepool",
			"schema": {
				"attributes": [
					{
						"name": "id",
						"string": {
							"computed_optional_required": "computed",
							"description": "The id of the spotnodepool.",
							"deprecation_message": "Use the name attribute instead",
							"plan_modifiers": [
								{
									"custom": {
										"imports": [
											{
												"path": "github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
											}
										],
										"schema_definition": "stringplanmodifier.UseStateForUnknown()"
									}
								}
							]
						}
					},
					{
						"name": "name",
						"string": {
							"computed_optional_required": "computed",
							"description": "The name of the spotnodepool.",
							"plan_modifiers": [
								{
									"custom": {
										"imports": [
											{
												"path": "github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
											}
										],
										"schema_definition": "stringplanmodifier.UseStateForUnknown()"
									}
								}
							]
						}
					},
					{
						"name": "last_updated",
						"string": {
							"computed_optional_required": "computed",
							"description": "The last time the spotnodepool was updated.",
							"plan_modifiers": [
								{
									"custom": {
										"imports": [
											{
												"path": "github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
											}
										],
										"schema_definition": "stringplanmodifier.UseStateForUnknown()"
									}
								}
							]
						}
					},
					{
						"name": "cloudspace_name",
						"string": {
							"computed_optional_required": "required",
							"description": "The name of the cloudspace.",
							"plan_modifiers": [
								{
									"custom": {
										"imports": [
											{
												"path": "github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
											}
										],
										"schema_definition": "stringplanmodifier.RequiresReplace()"
									}
								}
							],
							"validators": [
								{
									"custom": {
										"imports": [
											{
												"path": "github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
											}
										],
										"schema_definition": "stringvalidator.LengthBetween(1, 63)"
									}
								},
								{
									"custom": {
										"imports": [
											{
												"path": "github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
											},
											{
												"path": "regexp"
											}
										],
										"schema_definition": "stringvalidator.RegexMatches(regexp.MustCompile(`^[a-zA-Z0-9]([-a-zA-Z0-9]*[a-zA-Z0-9])?$`), \"Must be valid kubernetes name\")"
									}
								}
							]
						}
					},
					{
						"name": "server_class",
						"string": {
							"computed_optional_required": "required",
							"description": "The class of servers to use for the node pool, can be can be retrieved using the serverclasses data source.",
							"plan_modifiers": [
								{
									"custom": {
										"imports": [
											{
												"path": "github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
											}
										],
										"schema_definition": "stringplanmodifier.RequiresReplace()"
									}
								}
							]
						}
					},
					{
						"name": "desired_server_count",
						"int64": {
							"computed_optional_required": "computed_optional",
							"description": "The desired number of servers in the node pool. Should be removed if autoscaling is enabled.",
							"validators": [
								{
									"custom": {
										"imports": [
											{
												"path": "github.com/hashicorp/terraform-plugin-framework-validators/int64validator"
											}
										],
										"schema_definition": "int64validator.AtLeast(1)"
									}
								},
								{
									"custom": {
										"imports": [
											{
												"path": "github.com/hashicorp/terraform-plugin-framework-validators/int64validator"
											},
											{
												"path": "github.com/hashicorp/terraform-plugin-framework/path"
											}
										],
										"schema_definition": "int64validator.ConflictsWith(path.MatchRelative().AtParent().AtName(\"autoscaling\"))"
									}
								}
							]
						}
					},
					{
						"name": "bid_price",
						"float64": {
							"computed_optional_required": "required",
							"description": "The bid price for the server in USD, rounded to three decimal places.",
							"validators": [
								{
									"custom": {
										"imports": [
											{
												"path": "github.com/hashicorp/terraform-plugin-framework-validators/float64validator"
											}
										],
										"schema_definition": "float64validator.AtLeast(0.001)"
									}
								},
								{
									"custom": {
										"imports": [
											{
												"path": "github.com/rackerlabs/terraform-provider-spot/internal/spotvalidator"
											}
										],
										"schema_definition": "spotvalidator.DecimalDigitsAtMost(3)"
									}
								}
							]
						}
					},
					{
						"name": "autoscaling",
						"single_nested": {
							"computed_optional_required": "optional",
							"attributes": [
								{
									"name": "max_nodes",
									"int64": {
										"computed_optional_required": "optional",
										"description": "The maximum number of nodes in the node pool.",
										"validators": [
											{
												"custom": {
													"imports": [
														{
															"path": "github.com/hashicorp/terraform-plugin-framework-validators/int64validator"
														}
													],
													"schema_definition": "int64validator.AtLeast(1)"
												}
											},
											{
												"custom": {
													"imports": [
														{
															"path": "github.com/hashicorp/terraform-plugin-framework-validators/int64validator"
														}
													],
													"schema_definition": "int64validator.AtLeastSumOf(path.MatchRelative().AtParent().AtName(\"min_nodes\"))"
												}
											}
										]
									}
								},
								{
									"name": "min_nodes",
									"int64": {
										"computed_optional_required": "optional",
										"description": "The minimum number of nodes in the node pool.",
										"validators": [
											{
												"custom": {
													"imports": [
														{
															"path": "github.com/hashicorp/terraform-plugin-framework-validators/int64validator"
														}
													],
													"schema_definition": "int64validator.AtLeast(1)"
												}
											}
										]
									}
								}
							],
							"description": "Scales the nodes in a cluster based on usage. This block should be omitted to disable autoscaling.",
							"validators" :[
								{
									"custom": {
										"imports": [
											{
												"path": "github.com/hashicorp/terraform-plugin-framework-validators/objectvalidator"
											}
										],
										"schema_definition": "objectvalidator.AlsoRequires(path.MatchRelative().AtName(\"max_nodes\"), path.MatchRelative().AtName(\"min_nodes\"))"
									}
								}
							]
						}
					},
					{
						"name": "bid_status",
						"string": {
							"computed_optional_required": "computed",
							"plan_modifiers": [
								{
									"custom": {
										"imports": [
											{
												"path": "github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
											}
										],
										"schema_definition": "stringplanmodifier.UseStateForUnknown()"
									}
								}
							],
							"description": "Status of the bid associated with this spotnodepool."
						}
					},
					{
						"name": "won_count",
						"int64": {
							"computed_optional_required": "computed",
							"plan_modifiers": [
								{
									"custom": {
										"imports": [
											{
												"path": "github.com/hashicorp/terraform-plugin-framework/resource/schema/int64planmodifier"
											}
										],
										"schema_definition": "int64planmodifier.UseStateForUnknown()"
									}
								}
							],
							"description": "Number of won bids."
						}
					}
				]
			}
		},
		{
			"name": "ondemandnodepool",
			"schema": {
				"attributes": [					
					{
						"name": "name",
						"string": {
							"computed_optional_required": "computed",
							"description": "The name of the ondemandnodepool.",
							"plan_modifiers": [
								{
									"custom": {
										"imports": [
											{
												"path": "github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
											}
										],
										"schema_definition": "stringplanmodifier.UseStateForUnknown()"
									}
								}
							]
						}
					},
					{
						"name": "last_updated",
						"string": {
							"computed_optional_required": "computed",
							"description": "The last time the ondemandnodepool was updated.",
							"plan_modifiers": [
								{
									"custom": {
										"imports": [
											{
												"path": "github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
											}
										],
										"schema_definition": "stringplanmodifier.UseStateForUnknown()"
									}
								}
							]
						}
					},
					{
						"name": "cloudspace_name",
						"string": {
							"computed_optional_required": "required",
							"description": "The name of the cloudspace.",
							"plan_modifiers": [
								{
									"custom": {
										"imports": [
											{
												"path": "github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
											}
										],
										"schema_definition": "stringplanmodifier.RequiresReplace()"
									}
								}
							],
							"validators": [
								{
									"custom": {
										"imports": [
											{
												"path": "github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
											}
										],
										"schema_definition": "stringvalidator.LengthBetween(1, 63)"
									}
								},
								{
									"custom": {
										"imports": [
											{
												"path": "github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
											},
											{
												"path": "regexp"
											}
										],
										"schema_definition": "stringvalidator.RegexMatches(regexp.MustCompile(`^[a-zA-Z0-9]([-a-zA-Z0-9]*[a-zA-Z0-9])?$`), \"Must be valid kubernetes name\")"
									}
								}
							]
						}
					},
					{
						"name": "server_class",
						"string": {
							"computed_optional_required": "required",
							"description": "The class of servers to use for the node pool, can be can be retrieved using the serverclasses data source.",
							"plan_modifiers": [
								{
									"custom": {
										"imports": [
											{
												"path": "github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
											}
										],
										"schema_definition": "stringplanmodifier.RequiresReplace()"
									}
								}
							]
						}
					},
					{
						"name": "desired_server_count",
						"int64": {
							"computed_optional_required": "computed_optional",
							"description": "The desired number of servers in the node pool.",
							"validators": [
								{
									"custom": {
										"imports": [
											{
												"path": "github.com/hashicorp/terraform-plugin-framework-validators/int64validator"
											}
										],
										"schema_definition": "int64validator.AtLeast(1)"
									}
								}								
							]
						}
					},										
					{
						"name": "reserved_status",
						"string": {
							"computed_optional_required": "computed",
							"plan_modifiers": [
								{
									"custom": {
										"imports": [
											{
												"path": "github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
											}
										],
										"schema_definition": "stringplanmodifier.UseStateForUnknown()"
									}
								}
							],
							"description": "Status of the ondemandnodepool."
						}
					},
					{
						"name": "reserved_count",
						"int64": {
							"computed_optional_required": "computed",
							"plan_modifiers": [
								{
									"custom": {
										"imports": [
											{
												"path": "github.com/hashicorp/terraform-plugin-framework/resource/schema/int64planmodifier"
											}
										],
										"schema_definition": "int64planmodifier.UseStateForUnknown()"
									}
								}
							],
							"description": "Number of reserved on-demand nodes."
						}
					}
				]
			}
		}
	],
	"datasources": [
		{
			"name": "cloudspace",
			"schema": {
				"attributes": [
					{
						"name": "id",
						"string": {
							"computed_optional_required": "computed_optional",
							"description": "ID of the cloudspace, same as cloudspace name.",
							"deprecation_message": "Use the name attribute instead"
						}
					},
					{
						"name": "name",
						"string": {
							"computed_optional_required": "computed_optional",
							"description": "Name of the cloudspace",
							"validators": [
								{
									"custom": {
										"imports": [
											{
												"path": "github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
											}
										],
										"schema_definition": "stringvalidator.LengthBetween(1, 63)"
									}
								},
								{
									"custom": {
										"imports": [
											{
												"path": "github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
											},
											{
												"path": "regexp"
											}
										],
										"schema_definition": "stringvalidator.RegexMatches(regexp.MustCompile(`^[a-zA-Z0-9]([-a-zA-Z0-9]*[a-zA-Z0-9])?$`), \"Must be a valid kubernetes name\")"
									}
								},
								{
									"custom": {
										"imports": [
											{
												"path": "github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
											},
											{
												"path": "github.com/hashicorp/terraform-plugin-framework/path"
											}
										],
										"schema_definition": "stringvalidator.AtLeastOneOf(path.Expressions{path.MatchRoot(\"name\"), path.MatchRoot(\"cloudspace_name\"), path.MatchRoot(\"id\")}...)"
									}
								}
							]
						}
					},
					{
						"name": "cloudspace_name",
						"string": {
							"computed_optional_required": "computed_optional",
							"description": "Name of the cloudspace",
							"deprecation_message": "Use the name attribute instead"
						}
					},
					{
						"name": "hacontrol_plane",
						"bool": {
							"computed_optional_required": "computed",
							"description": "High Availability Kubernetes (replicated control plane for redundancy). This is a critical feature for production workloads."
						}
					},
					{
						"name": "region",
						"string": {
							"computed_optional_required": "computed",
							"description": "The region where the cloudspace resides."
						}
					},
					{
						"name": "preemption_webhook",
						"string": {
							"computed_optional_required": "optional",
							"description": "Webhook URL for preemption notifications."
						}
					},
					{
						"name": "first_ready_timestamp",
						"string": {
							"computed_optional_required": "computed",
							"description": "The time when the cloudspace was first ready."
						}
					},
					{
						"name": "spotnodepool_ids",
						"list": {
							"computed_optional_required": "computed",
							"description": "IDs of the spotnodepools associated with the cloudspace.",
							"element_type": {
								"string": {}
							}
						}
					},
					{
						"name": "ondemandnodepool_ids",
						"list": {
							"computed_optional_required": "computed",
							"description": "IDs of the ondemandnodepools associated with the cloudspace.",
							"element_type": {
								"string": {}
							}
						}
					},
					{
						"name": "bids",
						"set_nested": {
							"computed_optional_required": "computed",
							"nested_object": {
								"attributes": [
									{
										"name": "bid_name",
										"string": {
											"computed_optional_required": "computed"
										}
									},
									{
										"name": "won_count",
										"int64": {
											"computed_optional_required": "computed"
										}
									}
								]
							}
						}
					},
					{
						"name": "pending_allocations",
						"set_nested": {
							"computed_optional_required": "computed",
							"nested_object": {
								"attributes": [
									{
										"name": "bid_name",
										"string": {
											"computed_optional_required": "computed"
										}
									},
									{
										"name": "server_class",
										"string": {
											"computed_optional_required": "computed"
										}
									},
									{
										"name": "count",
										"int64": {
											"computed_optional_required": "computed"
										}
									}
								]
							}
						}
					},
					{
						"name": "kubeconfig",
						"string": {
							"computed_optional_required": "computed",
							"description": "Kubeconfig blob",
							"deprecation_message": "Use the kubeconfig data source instead"
						}
					},
					{
						"name": "api_server_endpoint",
						"string": {
							"computed_optional_required": "computed",
							"description": "Kubernetes api server URL"
						}
					},
					{
						"name": "user",
						"string": {
							"computed_optional_required": "computed",
							"description": "Name of the user to use for authentication to kubernetes api server"
						}
					},
					{
						"name": "token",
						"string": {
							"computed_optional_required": "computed",
							"description": "Token to use for authentication to kubernetes api server"
						}
					},
					{
						"name": "health",
						"string": {
							"computed_optional_required": "computed",
							"description": "Health indicates if CloudSpace has a working APIServer and available nodes"
						}
					},
					{
						"name": "phase",
						"string": {
							"computed_optional_required": "computed",
							"description": "Phase of the cloudspace"
						}
					},
					{
						"name": "reason",
						"string": {
							"computed_optional_required": "computed",
							"description": "Reason contains the reason why the CloudSpace is in a certain phase."
						}
					}
				]
			}
		},
		{
			"name": "spotnodepool",
			"schema": {
				"attributes": [
					{
						"name": "id",
						"string": {
							"computed_optional_required": "computed_optional",
							"description": "ID of the spotnodepool, same as name.",
							"deprecation_message": "Use the name attribute instead"
						}
					},
					{
						"name": "name",
						"string": {
							"computed_optional_required": "computed_optional",
							"description": "Name of the spotnodepool",
							"validators": [
								{
									"custom": {
										"imports": [
											{
												"path": "github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
											}
										],
										"schema_definition": "stringvalidator.LengthBetween(1, 63)"
									}
								},
								{
									"custom": {
										"imports": [
											{
												"path": "github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
											},
											{
												"path": "regexp"
											}
										],
										"schema_definition": "stringvalidator.RegexMatches(regexp.MustCompile(`^[a-zA-Z0-9]([-a-zA-Z0-9]*[a-zA-Z0-9])?$`), \"Must be a valid kubernetes name\")"
									}
								},
								{
									"custom": {
										"imports": [
											{
												"path": "github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
											},
											{
												"path": "github.com/hashicorp/terraform-plugin-framework/path"
											}
										],
										"schema_definition": "stringvalidator.AtLeastOneOf(path.Expressions{path.MatchRoot(\"name\"), path.MatchRoot(\"id\")}...)"
									}
								}
							]
						}
					},
					{
						"name": "cloudspace_name",
						"string": {
							"computed_optional_required": "computed",
							"description": "The name of the cloudspace"
						}
					},
					{
						"name": "server_class",
						"string": {
							"computed_optional_required": "computed",
							"description": "The class of servers used for the node pool."
						}
					},
					{
						"name": "desired_server_count",
						"int64": {
							"computed_optional_required": "computed",
							"description": "The desired number of servers in the node pool."
						}
					},
					{
						"name": "bid_price",
						"float64": {
							"computed_optional_required": "computed",
							"description": "The bid price for the server in USD"
						}
					},
					{
						"name": "autoscaling",
						"single_nested": {
							"computed_optional_required": "computed",
							"attributes": [
								{
									"name": "max_nodes",
									"int64": {
										"computed_optional_required": "computed",
										"description": "The maximum number of nodes in the node pool."
									}
								},
								{
									"name": "min_nodes",
									"int64": {
										"computed_optional_required": "computed",
										"description": "The minimum number of nodes in the node pool."
									}
								}
							]
						}
					},
					{
						"name": "bid_status",
						"string": {
							"computed_optional_required": "computed",
							"description": "Status of the bid associated with this spotnodepool."
						}
					},
					{
						"name": "won_count",
						"int64": {
							"computed_optional_required": "computed",
							"description": "Number of won bids."
						}
					}
				]
			}
		},
		{
			"name": "kubeconfig",
			"schema": {
				"attributes": [
					{
						"name": "id",
						"string": {
							"computed_optional_required": "computed_optional",
							"description": "ID of the cloudspace, same as cloudspace name.",
							"deprecation_message": "Use the cloudspace_name attribute instead"
						}
					},
					{
						"name": "cloudspace_name",
						"string": {
							"computed_optional_required": "computed_optional",
							"description": "Name of the cloudspace",
							"validators": [
								{
									"custom": {
										"imports": [
											{
												"path": "github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
											}
										],
										"schema_definition": "stringvalidator.LengthBetween(1, 63)"
									}
								},
								{
									"custom": {
										"imports": [
											{
												"path": "github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
											},
											{
												"path": "regexp"
											}
										],
										"schema_definition": "stringvalidator.RegexMatches(regexp.MustCompile(`^[a-zA-Z0-9]([-a-zA-Z0-9]*[a-zA-Z0-9])?$`), \"Must be a valid kubernetes name\")"
									}
								},
								{
									"custom": {
										"imports": [
											{
												"path": "github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
											},
											{
												"path": "github.com/hashicorp/terraform-plugin-framework/path"
											}
										],
										"schema_definition": "stringvalidator.AtLeastOneOf(path.Expressions{path.MatchRoot(\"cloudspace_name\"), path.MatchRoot(\"id\")}...)"
									}
								}
							]
						}
					},
					{
						"name": "raw",
						"string": {
							"computed_optional_required": "computed",
							"description": "Kubeconfig blob"
						}
					},
					{
						"name": "kubeconfigs",
						"list_nested": {
							"computed_optional_required": "computed",
							"nested_object": {
								"attributes": [
									{
										"name": "name",
										"string": {
											"computed_optional_required": "computed",
											"description": "Name of the kubeconfig context"
										}
									},
									{
										"name": "cluster",
										"string": {
											"computed_optional_required": "computed",
											"description": "Name of the cluster"
										}
									},
									{
										"name": "username",
										"string": {
											"computed_optional_required": "computed",
											"description": "Name of the user"
										}
									},
									{
										"name": "host",
										"string": {
											"computed_optional_required": "computed",
											"description": "Kube api server api endpoint"
										}
									},
									{
										"name": "insecure",
										"bool": {
											"computed_optional_required": "computed",
											"description": "Insecure flag"
										}
									},
									{
										"name": "token",
										"string": {
											"computed_optional_required": "computed",
											"description": "Token of your service account",
											"sensitive": true
										}
									},
									{
										"name": "exec",
										"single_nested": {
											"computed_optional_required": "computed",
											"attributes": [
												{
													"name": "api_version",
													"string": {
														"computed_optional_required": "computed",
														"description": "API version"
													}
												},
												{
													"name": "command",
													"string": {
														"computed_optional_required": "computed",
														"description": "Command to execute"
													}
												},
												{
													"name": "args",
													"list": {
														"computed_optional_required": "computed",
														"element_type": {
															"string": {}
														}
													}
												},
												{
													"name": "env",
													"map": {
														"computed_optional_required": "computed",
														"element_type": {
															"string": {}
														}
													}
												}
											]
										}
									}
								]
							}
						}
					}
				]
			}
		},
		{
			"name": "region",
			"schema": {
				"attributes":[
					{
						"name": "name",
						"string": {
							"computed_optional_required": "required",
							"description": "Name of the region"
						}
					},
					{
						"name": "country",
						"string": {
							"computed_optional_required": "computed",
							"description": "Country of the region"
						}
					},
					{
						"name": "description",
						"string": {
							"computed_optional_required": "computed",
							"description": "Description of the region"
						}
					},
					{
						"name": "region_provider",
						"single_nested": {
							"computed_optional_required": "computed",
							"attributes": [
								{
									"name": "provider_type",
									"string": {
										"computed_optional_required": "computed",
										"description": "Actual infrastructure backing the region"
									}
								},
								{
									"name": "region_name",
									"string": {
										"computed_optional_required": "computed",
										"description": "Name of the region"
									}
								}
							]
						}
					}
				]
			}
		},
		{
			"name": "regions",
			"schema": {
				"attributes": [
					{
						"name": "id",
						"string": {
							"computed_optional_required": "optional",
							"description": "Placeholder for ID"
						}
					},
					{
						"name": "names",
						"list": {
							"computed_optional_required": "computed",
							"description": "List of region names matching to the filters if provided. If no filters are provided, all the regions are returned.",
							"element_type": {
								"string": {}
							}
						}
					},
					{
						"name": "filters",
						"list_nested": {
							"computed_optional_required": "optional",
							"description": "List of filters.",
							"nested_object": {
								"attributes": [
									{
										"name": "name",
										"string": {
											"computed_optional_required": "required",
											"description": "Name of the attribute on which this filter should be applied. The tags attribute is a special case where the name has to be specified as 'tags:<tag_key>'"
										}
									},
									{
										"name": "values",
										"set": {
											"computed_optional_required": "required",
											"description": "Set of values for the attribute, if any of the 'value' matches then the filter is considered to be matched",
											"element_type": {
												"string": {}
											}
										}
									}
								]
							}
						}
					}
				]
			}
		},
		{
			"name": "serverclass",
			"schema": {
				"attributes": [
					{
						"name": "name",
						"string": {
							"computed_optional_required": "required",
							"description": "Name of the server class"
						}
					},
					{
						"name": "availability",
						"string": {
							"computed_optional_required": "computed",
							"description": "Describes the serverclass availability status"
						}
					},
					{
						"name": "category",
						"string": {
							"computed_optional_required": "computed",
							"description": "Describes the serverclass category"
						}
					},
					{
						"name": "display_name",
						"string": {
							"computed_optional_required": "computed",
							"description": "Specifies the human-readable name to use"
						}
					},
					{
						"name": "flavor_type",
						"string": {
							"computed_optional_required": "computed",
							"description": "Describes whether it is a VM or bare metal. This determines certain capabilities like nested virtualization"
						}
					},
					{
						"name": "on_demand_pricing",
						"single_nested": {
							"computed_optional_required": "computed",
							"attributes": [
								{
									"name": "cost",
									"string": {
										"computed_optional_required": "computed",
										"description": "Describes the USD cost of this type of servers. If pricing is localized, this can be used as the base factor"
									}
								},
								{
									"name": "interval",
									"string": {
										"computed_optional_required": "computed",
										"description": "Indicates the interval used for the pricing"
									}
								}
							]
						}
					},
					{
						"name": "serverclass_provider",
						"single_nested": {
							"computed_optional_required": "computed",
							"attributes": [
								{
									"name": "provider_type",
									"string": {
										"computed_optional_required": "computed",
										"description": "Actual infrastructure backing the server class"
									}
								},
								{
									"name": "flavor_id",
									"string": {
										"computed_optional_required": "computed",
										"description": "Name of the flavor"
									}
								}
							]
						}
					},
					{
						"name": "region",
						"string": {
							"computed_optional_required": "computed",
							"description": "Specifies the region where the servers belonging to this ServerClass resides in"
						}
					},
					{
						"name": "resources",
						"single_nested": {
							"computed_optional_required": "computed",
							"attributes": [
								{
									"name": "cpu",
									"string": {
										"computed_optional_required": "computed"
									}
								},
								{
									"name": "memory",
									"string": {
										"computed_optional_required": "computed"
									}
								}
							]
						}
					},
					{
						"name": "status",
						"single_nested": {
							"computed_optional_required": "computed",
							"attributes": [
								{
									"name": "available",
									"int64": {
										"computed_optional_required": "computed",
										"description": "how many servers of this class are currently in use"
									}
								},
								{
									"name": "capacity",
									"int64": {
										"computed_optional_required": "computed",
										"description": "how many servers of this class are currently in use"
									}
								},
								{
									"name": "last_auction",
									"int64": {
										"computed_optional_required": "computed",
										"description": "how many servers of this class are currently in use"
									}
								},
								{
									"name": "reserved",
									"int64": {
										"computed_optional_required": "computed",
										"description": "how many servers of this class are currently in use"
									}
								},
								{
									"name": "spot_pricing",
									"single_nested": {
										"computed_optional_required": "computed",
										"attributes":[
											{
												"name": "hammer_price_per_hour",
												"string": {
													"computed_optional_required": "computed"
												}
											},
											{
												"name": "market_price_per_hour",
												"string": {
													"computed_optional_required": "computed"
												}
											}
										]
									}
								}
							]
						}
					}
				]
			}
		},
		{
			"name": "serverclasses",
			"schema": {
				"attributes": [
					{
						"name": "id",
						"string": {
							"computed_optional_required": "optional",
							"description": "Placeholder for ID"
						}
					},
					{
						"name": "names",
						"list": {
							"computed_optional_required": "computed",
							"description": "List of server class names matching to the filters. If no filters are provided, all the regions are returned.",
							"element_type": {
								"string": {}
							}
						}
					},
					{
						"name": "filters",
						"list_nested": {
							"computed_optional_required": "optional",
							"description": "List of filters",
							"nested_object": {
								"attributes": [
									{
										"name": "name",
										"string": {
											"computed_optional_required": "required",
											"description": "Name of the attribute on which this filter should be applied. The tags attribute is a special case where the name has to be specified as 'tags:<tag_key>'"
										}
									},
									{
										"name": "values",
										"set": {
											"computed_optional_required": "required",
											"description": "If any of the 'value' matches, then the filter is considered to be matched. For numeric attributes like resources.cpu, resources.memory, and others, the values also support comparator expressions like >8GB, <=4, etc.",
											"element_type": {
												"string": {}
											}
										}
									}
								]
							}
						}
					}
				]
			}
		},
		{
			"name": "ondemandnodepool",
			"schema": {
				"attributes": [			
					{
						"name": "name",
						"string": {
							"computed_optional_required": "computed_optional",
							"description": "Name of the ondemandnodepool",
							"validators": [
								{
									"custom": {
										"imports": [
											{
												"path": "github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
											}
										],
										"schema_definition": "stringvalidator.LengthBetween(1, 63)"
									}
								},
								{
									"custom": {
										"imports": [
											{
												"path": "github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
											},
											{
												"path": "regexp"
											}
										],
										"schema_definition": "stringvalidator.RegexMatches(regexp.MustCompile(`^[a-zA-Z0-9]([-a-zA-Z0-9]*[a-zA-Z0-9])?$`), \"Must be a valid kubernetes name\")"
									}
								}								
							]
						}
					},
					{
						"name": "cloudspace_name",
						"string": {
							"computed_optional_required": "computed",
							"description": "The name of the cloudspace"
						}
					},
					{
						"name": "server_class",
						"string": {
							"computed_optional_required": "computed",
							"description": "The class of servers used for the node pool"
						}
					},
					{
						"name": "desired_server_count",
						"int64": {
							"computed_optional_required": "computed",
							"description": "The desired number of servers in the node pool."
						}
					},		
					{
						"name": "reserved_status",
						"string": {
							"computed_optional_required": "computed",
							"description": "Status of the ondemandnodepool."
						}
					},
					{
						"name": "reserved_count",
						"int64": {
							"computed_optional_required": "computed",
							"description": "Number of reserved on-demand nodes."
						}
					}
				]
			}
		}
	],
	"version": "0.1"
}